#! /usr/bin/env python2.6
# Copyright (c) 2010, Neville-Neil Consulting
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# Neither the name of Neville-Neil Consulting nor the names of its 
# contributors may be used to endorse or promote products derived from 
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Author: George V. Neville-Neil
#
# Description: 

"""ptp_plot.py -- Plot PTP delays reported by the slave.

This program takes a ptp log file generated by the slave
and plots various times on a graph

This program requires at least python2.6 as well as numpy
and gnuplot support.

"""

import os
import csv
import gzip
import datetime
import subprocess
import sys
import tempfile
import time

from numpy import *

import Gnuplot, Gnuplot.funcutils

def usage():
    sys.exit()

def main():

    from optparse import OptionParser
    
    parser = OptionParser()
    parser.add_option("-a", "--all", dest="all", default=0,
                      help="show all entries")
    parser.add_option("-d", "--debug", dest="debug", default=0,
                      help="debug gnuplot")
    parser.add_option("-t", "--type", dest="type", default="delay",
                      help="plot the delay or offset")
    parser.add_option("-l", "--logfile", dest="logfile", default=None,
                      help="logfile to use")
    parser.add_option("-s", "--start", dest="start", default="09:30:00",
                      help="start time")
    parser.add_option("-e", "--end", dest="end", default="16:30:00",
                      help="end time")
    parser.add_option("-r", "--roll", dest="roll", type=int, default=0,
                      help="number of days to roll at the start")
    parser.add_option("-p", "--print", dest="png", default=None,
                      help="file to print the graph to")
    parser.add_option("-y", "--ymin", dest="ymin", default="0.000000",
                      help="minimum y value")
    parser.add_option("-o", "--old", dest="old", default=None,
                      help="log files from old PTPd")
    parser.add_option("-Y", "--ymax", dest="ymax", default="0.001000",
                      help="maximum y value")
    parser.add_option("-S", "--save", dest="save", default=None,
                      help="save file name")
    parser.add_option("-B", "--batch", dest="batch", default=False,
                      help="do not display on screen, generate png only")


    (options, args) = parser.parse_args()
    
    if ((options.type != "delay") and (options.type != "offset")):
        print "You must choose either delay or offset."
        usage()

    if (os.path.splitext(options.logfile)[1] == '.gz'):
        file = gzip.open(options.logfile, "rb")
    else:
        file = open(options.logfile, "rb")

    try:
        logfile = csv.reader(file)
    except:
        print "Could not open %s" % options.logfile
        sys.exit()
        
    #
    # This is an ugly hack, but it turns out that gnuplot
    # is better able to plot time data if we write it out
    # in the familiar format to a temporary file and
    # then plot from the file rather than building up
    # arrays of data.
    #
    tmpfile = tempfile.NamedTemporaryFile()

    savefile = None
    
    if (options.save != None):
        savefile = open(options.save, "w")
    
    # Handle the differences between generations of log files
    delay = 3
    offset = 4
    time_format = "%Y-%m-%d %H:%M:%S"

    if (options.old != None):
        delay = 2
        offset = 3
        time_format = "%m/%d/%Y %H:%M:%S"

    first = True
    for line in logfile:
        # Split off the microseconds
        try: 
            dt = line[0].rpartition(':')[0]
        except:
            continue

        try:
            now = datetime.datetime.strptime(dt, time_format)
        except:
            continue
        
        if (first == True):
            if (options.all == 0):
                start = datetime.datetime.strptime(options.start, "%H:%M:%S")
            else:
                start = now
            start = start.replace(year=now.year, month=now.month,
                                  day=now.day + options.roll)
            end = datetime.datetime.strptime(options.end, "%H:%M:%S")
            end = end.replace(year=now.year, month=now.month,
                              day=now.day + options.roll)
            first = False
        if ((now > end) and (options.all == 0)):
            break
        if ((now > start) or (options.all != 0)):
            if (options.type == "delay"):
                tmpfile.write("%s%s\n" % (dt, line[delay]))
                if (savefile != None):
                    savefile.write("%s%s\n" % (dt, line[delay]))
            else:
                tmpfile.write("%s%s\n" % (dt, line[offset]))
                if (savefile != None):
                    savefile.write("%s%s\n" % (dt, line[offset]))
            
    plotter = Gnuplot.Gnuplot(debug=options.debug)

    plotter('set style data dots')
    if (options.type == "delay"):
        plotter.set_range('yrange', [options.ymin, options.ymax])
        plotter.ylabel('Seconds\\nOne Way Delay')
    else:
        plotter.set_range('yrange', [options.ymin, options.ymax])
        plotter.ylabel('Seconds\\nOffset')

    prettyname = "\\n" + os.path.splitext(os.path.split(options.logfile)[1])[0]
    if (options.all == 0):
        plotter.xlabel(prettyname + " " + options.start + " - " +
                       options.end)
    else:
        plotter.xlabel(prettyname + " " + str(start) + " - " + str(now))
    plotter('set xdata time')
    plotter('set timefmt "' + time_format + '"')
    plotter('set format x "%H:%M"')
    plotter('set xtics 7200')
    plotter('set grid')

    tmpfile.flush()

    # If we're in batch mode we have to do this all by hand because
    # hardcopy goes too far and expects an interactive user.
    if (options.batch != False):
        plotter('set terminal png giant')
        plotter('set output "' + options.logfile + "-" + options.type + ".png")
        
    plotter.plot(Gnuplot.File(tmpfile.name, title="", using='1:3'))

    if (options.png != None):
        plotter.hardcopy(options.logfile + "-" + options.type + ".png",
                         terminal='png')

    if (options.batch == False):
        raw_input('Press return to exit')
    else:
        time.sleep(1)

if __name__ == "__main__":
    main()
